package com;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ElecTrade extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b506200001c6200014f565b604051809103906000f08015801562000039573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200008362000160565b604051809103906000f080158015620000a0573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000eb62000171565b604051809103906000f08015801562000108573d6000803e3d6000fd5b50600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000182565b604051610ca9806200133483390190565b604051610d998062001fdd83390190565b6040516104af8062002d7683390190565b6111a280620001926000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063153eaac9146100885780632a00a472146102325780634a7221a0146103055780634b5f6556146104f45780634fad18f11461054b578063553fec84146105df5780636599c62914610636575b600080fd5b34801561009457600080fd5bffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061068d565b005b34801561023e57600080fd5b506102616004803603810190808035600019169060200190929190505050610a90565b604051808560001916600019168152602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183151515158152602001828103825285818151815260200191508051906020019060200280838360005b838110156102ee5780820151818401526020810190506102d3565b505050509050019550505050505060405180910390f35b34801561031157600080fd5b506103346004803603810190808035600019169060200190929190505050610bf0565b60405180896000191660001916815260200180602001806020018060200180602001806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186810386528d818151815260200191508051906020019060200280838360005b838110156103cd5780820151818401526020810190506103b2565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b8381101561040f5780820151818401526020810190506103f4565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b83811015610451578082015181840152602081019050610436565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b83811015610493578082015181840152602081019050610478565b50505050905001868103825289818151815260200191508051906020019060200280838360005b838110156104d55780820151818401526020810190506104ba565b505050509050019d505050505050505050505050505060405180910390f35b34801561050057600080fd5b50610509610ea0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055757600080fd5b506105dd600480360381019080803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ec6565b005b3480156105eb57600080fd5b506105f461112b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064257600080fd5b5061064b611150565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372edcbf289898989898989896040518963ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180896000191660001916815260200180602001806020018060200180602001806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186810386528d818151815260200191508051906020019060200280838360005b8381101561079757808201518184015260208101905061077c565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b838110156107d95780820151818401526020810190506107be565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b8381101561081b578082015181840152602081019050610800565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b8381101561085d578082015181840152602081019050610842565b50505050905001868103825289818151815260200191508051906020019060200280838360005b8381101561089f578082015181840152602081019050610884565b505050509050019d5050505050505050505050505050600060405180830381600087803b1580156108cf57600080fd5b505af11580156108e3573d6000803e3d6000fd5b505050507fcec323d69ea340904422039eea069e9708f65f0b755c52224821e7554fdd1e4e88888888878787604051808860001916600019168152602001806020018060200180602001806020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185810385528b818151815260200191508051906020019060200280838360005b838110156109a4578082015181840152602081019050610989565b5050505090500185810384528a818151815260200191508051906020019060200280838360005b838110156109e65780820151818401526020810190506109cb565b50505050905001858103835289818151815260200191508051906020019060200280838360005b83811015610a28578082015181840152602081019050610a0d565b50505050905001858103825288818151815260200191508051906020019060200280838360005b83811015610a6a578082015181840152602081019050610a4f565b505050509050019b50505050505050505050505060405180910390a15050505050505050565b600060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a00a472866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015610b2f57600080fd5b505af1158015610b43573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506080811015610b6d57600080fd5b81019080805190602001909291908051640100000000811115610b8f57600080fd5b82810190506020810184811115610ba557600080fd5b8151856020820283011164010000000082111715610bc257600080fd5b5050929190602001805190602001909291908051906020019092919050505093509350935093509193509193565b60006060806060806060600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354f6127f8a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610100811015610cd557600080fd5b81019080805190602001909291908051640100000000811115610cf757600080fd5b82810190506020810184811115610d0d57600080fd5b8151856020820283011164010000000082111715610d2a57600080fd5b50509291906020018051640100000000811115610d4657600080fd5b82810190506020810184811115610d5c57600080fd5b8151856020820283011164010000000082111715610d7957600080fd5b50509291906020018051640100000000811115610d9557600080fd5b82810190506020810184811115610dab57600080fd5b8151856020820283011164010000000082111715610dc857600080fd5b50509291906020018051640100000000811115610de457600080fd5b82810190506020810184811115610dfa57600080fd5b8151856020820283011164010000000082111715610e1757600080fd5b50509291906020018051640100000000811115610e3357600080fd5b82810190506020810184811115610e4957600080fd5b8151856020820283011164010000000082111715610e6657600080fd5b50509291906020","01805190602001909291908051906020019092919050505097509750975097509750975097509750919395975091939597565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b826000600102816000191614151515610f47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f742076616c6964206861736800000000000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fad18f18585336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808460001916600019168152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b8381101561103557808201518184015260208101905061101a565b50505050905001945050505050600060405180830381600087803b15801561105c57600080fd5b505af1158015611070573d6000803e3d6000fd5b5050505083600019167f95b71dc8b674d50da0bb2c0e61871992e18255cabf8415eb94155a66f1dda6b5843360405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b838110156111115780820151818401526020810190506110f6565b50505050905001935050505060405180910390a250505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058200cc744f107fb98422e564c878f727bf6823d72a29e42dbb28210f744fa3713ba002960806040526000600260006101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c3b8061006e6000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631e95c2ce146100885780632a00a472146100b95780633b7711381461018c5780634fad18f1146101bd5780639c52a7f114610251578063b2bdfa7b14610294578063ff9913e8146102eb575b600080fd5b34801561009457600080fd5b506100b7600480360381019080803560001916906020019092919050505061032e565b005b3480156100c557600080fd5b506100e8600480360381019080803560001916906020019092919050505061059a565b604051808560001916600019168152602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183151515158152602001828103825285818151815260200191508051906020019060200280838360005b8381101561017557808201518184015260208101905061015a565b505050509050019550505050505060405180910390f35b34801561019857600080fd5b506101bb60048036038101908080356000191690602001909291905050506106ff565b005b3480156101c957600080fd5b5061024f600480360381019080803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610739565b005b34801561025d57600080fd5b50610292600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610914565b005b3480156102a057600080fd5b506102a9610a33565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102f757600080fd5b5061032c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a58565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103d9575060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b151561044d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f742061757468656e7469636174656400000000000000000000000000000081525060200191505060405180910390fd5b806000191660036000836000191660001916815260200190815260200160002060000154600019161415156104ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f72657175657374206e6f7420666f756e6400000000000000000000000000000081525060200191505060405180910390fd5b600060036000836000191660001916815260200190815260200160002060020160146101000a81548160ff021916908315150217905515610597576003600082600019166000191681526020019081526020016000206000808201600090556001820160006105599190610b76565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160146101000a81549060ff021916905550505b50565b60006060600080600060036000876000191660001916815260200190815260200160002090508560001916600360008860001916600019168152602001908152602001600020600001546000191614151561065d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f72657175657374206e6f7420666f756e6400000000000000000000000000000081525060200191505060405180910390fd5b85816001018260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160149054906101000a900460ff16828054806020026020016040519081016040528092919081815260200182805480156106e857602002820191906000526020600020905b815460001916815260200190600101908083116106d0575b505050505092509450945094509450509193509193565b600160036000836000191660001916815260200190815260200160002060020160146101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107e4575060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b1515610858576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f742061757468656e7469636174656400000000000000000000000000000081525060200191505060405180910390fd5b8260036000856000191660001916815260200190815260200160002060000181600019169055508160036000856000191660001916815260200190815260200160002060010190805190602001906108b1929190610b97565b508060036000856000191660001916815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e6f742061646d696e000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e6f742061646d696e000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b5080546000825590600052602060002090810190610b949190610bea565b50565b828054828255906000526020600020908101928215610bd9579160200282015b82811115610bd8578251829060001916905591602001919060010190610bb7565b5b509050610be69190610bea565b5090565b610c0c91905b80821115610c08576000816000905550600101610bf0565b5090565b905600a165627a7a72305820b5e94f0d7d6ab559e6ae36ddb813c0f307617fc94ddd32b6a4215ef36932d44000296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffff","ffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d46806100536000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806354f6127f1461007257806372edcbf2146102615780639c52a7f11461040b578063b2bdfa7b1461044e578063ff9913e8146104a5575b600080fd5b34801561007e57600080fd5b506100a160048036038101908080356000191690602001909291905050506104e8565b60405180896000191660001916815260200180602001806020018060200180602001806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186810386528d818151815260200191508051906020019060200280838360005b8381101561013a57808201518184015260208101905061011f565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b8381101561017c578082015181840152602081019050610161565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b838110156101be5780820151818401526020810190506101a3565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b838110156102005780820151818401526020810190506101e5565b50505050905001868103825289818151815260200191508051906020019060200280838360005b83811015610242578082015181840152602081019050610227565b505050509050019d505050505050505050505050505060405180910390f35b34801561026d57600080fd5bffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107a4565b005b34801561041757600080fd5b5061044c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a40565b005b34801561045a57600080fd5b50610463610b5f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b157600080fd5b506104e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b84565b005b600060608060608060606000806000600260008b6000191660001916815260200190815260200160002090508960001916816000015460001916141515610597576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f45766964656e6365206e6f74206578697374000000000000000000000000000081525060200191505060405180910390fd5b806000015481600101826002018360030184600401856005018660060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600701548680548060200260200160405190810160405280929190818152602001828054801561062957602002820191906000526020600020905b81546000191681526020019060010190808311610611575b505050505096508580548060200260200160405190810160405280929190818152602001828054801561067f57602002820191906000526020600020905b81546000191681526020019060010190808311610667575b50505050509550848054806020026020016040519081016040528092919081815260200182805480156106d557602002820191906000526020600020905b815460001916815260200190600101908083116106bd575b505050505094508380548060200260200160405190810160405280929190818152602001828054801561072b57602002820191906000526020600020905b81546000191681526020019060010190808311610713575b505050505093508280548060200260200160405190810160405280929190818152602001828054801561078157602002820191906000526020600020905b81546000191681526020019060010190808311610769575b505050505092509850985098509850985098509850985050919395975091939597565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061084f575060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15156108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f742061757468656e7469636174656400000000000000000000000000000081525060200191505060405180910390fd5b87600260008a60001916600019168152602001908152602001600020600001816000191690555086600260008a60001916600019168152602001908152602001600020600101908051906020019061091c929190610ca2565b5086600260008a60001916600019168152602001908152602001600020600201908051906020019061094f929190610ca2565b5084600260008a600019166000191681526020019081526020016000206003019080519060200190610982929190610ca2565b5082600260008a6000191660001916815260200190815260200160002060050190805190602001906109b5929190610ca2565b5081600260008a6000191660001916815260200190815260200160002060060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008a60001916600019168152602001908152602001600020600701819055505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e6f742061646d696e000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e6f742061646d696e000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054828255906000526020600020908101928215610ce4579160200282015b82811115610ce3578251829060001916905591602001919060010190610cc2565b5b509050610cf19190610cf5565b5090565b610d1791905b80821115610d13576000816000905550600101610cfb565b5090565b905600a165627a7a7230582088590fdc4add3fcd9933ff99f05291966208c8cdc9600e907cec7b34de47b6640029608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061044f806100606000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063075461721461006757806327e235e3146100be57806340c10f1914610115578063d0679d3414610162575b600080fd5b34801561007357600080fd5b5061007c6101af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100ca57600080fd5b506100ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101d4565b6040518082815260200191505060405180910390f35b34801561012157600080fd5b50610160600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506101ec565b005b34801561016e57600080fd5b506101ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610298565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffff","ffffffffffffffffffffffffffffffffff1614151561024757600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156102e657600080fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f3990db2d31862302a685e8086b5755072a6e2b5b780af1ee81ece35ee3cd3345338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150505600a165627a7a72305820b51d9f29c00dd4e8110342d435099a0d4981c4111305b7bfcf58c934d36721a60029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506200001c6200014f565b604051809103906000f08015801562000039573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200008362000160565b604051809103906000f080158015620000a0573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000eb62000171565b604051809103906000f08015801562000108573d6000803e3d6000fd5b50600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000182565b604051610ca9806200133483390190565b604051610d998062001fdd83390190565b6040516104af8062002d7683390190565b6111a280620001926000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063168da5861461008857806334e07cb8146100df5780635586865f14610289578063766ecc04146102e057806393878eed146103b3578063c503a9e214610447578063c898ba861461049e575b600080fd5b34801561009457600080fd5b5061009d61068d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100eb57600080fd5bffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106b3565b005b34801561029557600080fd5b5061029e610ab6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ec57600080fd5b5061030f6004803603810190808035600019169060200190929190505050610adb565b604051808560001916600019168152602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183151515158152602001828103825285818151815260200191508051906020019060200280838360005b8381101561039c578082015181840152602081019050610381565b505050509050019550505050505060405180910390f35b3480156103bf57600080fd5b50610445600480360381019080803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c3b565b005b34801561045357600080fd5b5061045c610ea0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104aa57600080fd5b506104cd6004803603810190808035600019169060200190929190505050610ec6565b60405180896000191660001916815260200180602001806020018060200180602001806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186810386528d818151815260200191508051906020019060200280838360005b8381101561056657808201518184015260208101905061054b565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b838110156105a857808201518184015260208101905061058d565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b838110156105ea5780820151818401526020810190506105cf565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b8381101561062c578082015181840152602081019050610611565b50505050905001868103825289818151815260200191508051906020019060200280838360005b8381101561066e578082015181840152602081019050610653565b505050509050019d505050505050505050505050505060405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1fd28f089898989898989896040518963ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180896000191660001916815260200180602001806020018060200180602001806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186810386528d818151815260200191508051906020019060200280838360005b838110156107bd5780820151818401526020810190506107a2565b5050505090500186810385528c818151815260200191508051906020019060200280838360005b838110156107ff5780820151818401526020810190506107e4565b5050505090500186810384528b818151815260200191508051906020019060200280838360005b83811015610841578082015181840152602081019050610826565b5050505090500186810383528a818151815260200191508051906020019060200280838360005b83811015610883578082015181840152602081019050610868565b50505050905001868103825289818151815260200191508051906020019060200280838360005b838110156108c55780820151818401526020810190506108aa565b505050509050019d5050505050505050505050505050600060405180830381600087803b1580156108f557600080fd5b505af1158015610909573d6000803e3d6000fd5b505050507fe4024d9bbfbe2c244cfbc68e4a075522da431b4417f8383d882603de183a611188888888878787604051808860001916600019168152602001806020018060200180602001806020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185810385528b818151815260200191508051906020019060200280838360005b838110156109ca5780820151818401526020810190506109af565b5050505090500185810384528a818151815260200191508051906020019060200280838360005b83811015610a0c5780820151818401526020810190506109f1565b50505050905001858103835289818151815260200191508051906020019060200280838360005b83811015610a4e578082015181840152602081019050610a33565b50505050905001858103825288818151815260200191508051906020019060200280838360005b83811015610a90578082015181840152602081019050610a75565b505050509050019b50505050505050505050505060405180910390a15050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663766ecc04866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015610b7a57600080fd5b505af1158015610b8e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506080811015610bb857600080fd5b81019080805190602001909291908051640100000000811115610bda57600080fd5b82810190506020810184811115610bf057600080fd5b8151856020820283011164010000000082111715610c0d57600080fd5b5050929190602001805190602001909291908051906020019092919050505093509350935093509193509193565b826000600102816000191614151515610cbc576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f742076616c6964206861736800000000000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393878eed8585336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808460001916600019168152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b83811015610daa578082015181840152602081019050610d8f565b50505050905001945050505050600060405180830381600087803b158015610dd157600080fd5b505af1158015610de5573d6000803e3d6000fd5b5050505083600019167f60798732bf42968acd812ec290b186bc8f3a941a539a74928de2f833c52c8c2a843360405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b8381","1015610e86578082015181840152602081019050610e6b565b50505050905001935050505060405180910390a250505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006060806060806060600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cad1a4698a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015610f6c57600080fd5b505af1158015610f80573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610100811015610fab57600080fd5b81019080805190602001909291908051640100000000811115610fcd57600080fd5b82810190506020810184811115610fe357600080fd5b815185602082028301116401000000008211171561100057600080fd5b5050929190602001805164010000000081111561101c57600080fd5b8281019050602081018481111561103257600080fd5b815185602082028301116401000000008211171561104f57600080fd5b5050929190602001805164010000000081111561106b57600080fd5b8281019050602081018481111561108157600080fd5b815185602082028301116401000000008211171561109e57600080fd5b505092919060200180516401000000008111156110ba57600080fd5b828101905060208101848111156110d057600080fd5b81518560208202830111640100000000821117156110ed57600080fd5b5050929190602001805164010000000081111561110957600080fd5b8281019050602081018481111561111f57600080fd5b815185602082028301116401000000008211171561113c57600080fd5b50509291906020018051906020019092919080519060200190929190505050975097509750975097509750975097509193959750919395975600a165627a7a7230582097bde73408619e66eb8a7678c6f8c22e91d09a2d55f2b392847a27eab60cf878002960806040526000600260006101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c3b8061006e6000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806328e914891461008857806356bea000146100df578063766ecc04146101225780638f5c1106146101f557806393878eed14610226578063bb45f36f146102ba578063da89dd38146102eb575b600080fd5b34801561009457600080fd5b5061009d61032e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100eb57600080fd5b50610120600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610353565b005b34801561012e57600080fd5b506101516004803603810190808035600019169060200190929190505050610472565b604051808560001916600019168152602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183151515158152602001828103825285818151815260200191508051906020019060200280838360005b838110156101de5780820151818401526020810190506101c3565b505050509050019550505050505060405180910390f35b34801561020157600080fd5b5061022460048036038101908080356000191690602001909291905050506105d7565b005b34801561023257600080fd5b506102b8600480360381019080803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610843565b005b3480156102c657600080fd5b506102e96004803603810190808035600019169060200190929190505050610a1e565b005b3480156102f757600080fd5b5061032c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a58565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610417576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e6f742061646d696e000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600060606000806000600360008760001916600019168152602001908152602001600020905085600019166003600088600019166000191681526020019081526020016000206000015460001916141515610535576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f72657175657374206e6f7420666f756e6400000000000000000000000000000081525060200191505060405180910390fd5b85816001018260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160149054906101000a900460ff16828054806020026020016040519081016040528092919081815260200182805480156105c057602002820191906000526020600020905b815460001916815260200190600101908083116105a8575b505050505092509450945094509450509193509193565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610682575060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15156106f6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f742061757468656e7469636174656400000000000000000000000000000081525060200191505060405180910390fd5b80600019166003600083600019166000191681526020019081526020016000206000015460001916141515610793576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f72657175657374206e6f7420666f756e6400000000000000000000000000000081525060200191505060405180910390fd5b600060036000836000191660001916815260200190815260200160002060020160146101000a81548160ff021916908315150217905515610840576003600082600019166000191681526020019081526020016000206000808201600090556001820160006108029190610b76565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160146101000a81549060ff021916905550505b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108ee575060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b1515610962576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f742061757468656e7469636174656400000000000000000000000000000081525060200191505060405180910390fd5b8260036000856000191660001916815260200190815260200160002060000181600019169055508160036000856000191660001916815260200190815260200160002060010190805190602001906109bb929190610b97565b508060036000856000191660001916815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600160036000836000191660001916815260200190815260200160002060020160146101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b1c576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e6f742061646d696e000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b5080546000825590600052602060002090810190610b949190610bea565b50565b828054828255906000526020600020908101928215610bd9579160200282015b82811115610bd8578251829060001916905591602001919060010190610bb7565b5b509050610be69190610bea565b5090565b610c0c91905b80821115610c08576000816000905550600101610bf0565b5090565b905600a165627a7a7230582055f1cec5c3803e5a89a3e205f85da3bafb5f1b815a4294196e72b753a01cf54700296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffff","","ffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156102ce57600080fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f48984c81ee87c4a7a4d82147dac565e47b22e0be8f6f0e7d823d41e9c0f076de338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b600160205280600052604060002060009150905054815600a165627a7a723058207c583413b850f3a3c4fccff0f462f36365b01e9126d067d7a575a9788cab89010029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"FP\",\"type\":\"bytes32[]\"},{\"name\":\"RP\",\"type\":\"bytes32[]\"},{\"name\":\"Comm\",\"type\":\"bytes32[]\"},{\"name\":\"SIG\",\"type\":\"bytes32[]\"},{\"name\":\"Encript\",\"type\":\"bytes32[]\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"oprateEvidence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRequestData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"SIG\",\"type\":\"bytes32[]\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"passed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getEvidence\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tradeRepo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"SIG\",\"type\":\"bytes32[]\"},{\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"createSaveRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_requestRepo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_evidenceRepo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"SIG\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreateSaveRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"oprateSaveRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"FP\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"RP\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"Comm\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"Encript\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"EvidenceSaved\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_OPRATEEVIDENCE = "oprateEvidence";

    public static final String FUNC_GETREQUESTDATA = "getRequestData";

    public static final String FUNC_GETEVIDENCE = "getEvidence";

    public static final String FUNC__TRADEREPO = "_tradeRepo";

    public static final String FUNC_CREATESAVEREQUEST = "createSaveRequest";

    public static final String FUNC__REQUESTREPO = "_requestRepo";

    public static final String FUNC__EVIDENCEREPO = "_evidenceRepo";

    public static final Event CREATESAVEREQUEST_EVENT = new Event("CreateSaveRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event OPRATESAVEREQUEST_EVENT = new Event("oprateSaveRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event EVIDENCESAVED_EVENT = new Event("EvidenceSaved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected ElecTrade(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt oprateEvidence(byte[] hash, List<byte[]> FP, List<byte[]> RP, List<byte[]> Comm, List<byte[]> SIG, List<byte[]> Encript, String creator, BigInteger timeStamp) {
        final Function function = new Function(
                FUNC_OPRATEEVIDENCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash), 
                FP.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(FP, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                RP.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(RP, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                Comm.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(Comm, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                SIG.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(SIG, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                Encript.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(Encript, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(creator), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(timeStamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] oprateEvidence(byte[] hash, List<byte[]> FP, List<byte[]> RP, List<byte[]> Comm, List<byte[]> SIG, List<byte[]> Encript, String creator, BigInteger timeStamp, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_OPRATEEVIDENCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash), 
                FP.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(FP, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                RP.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(RP, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                Comm.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(Comm, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                SIG.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(SIG, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                Encript.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(Encript, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(creator), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(timeStamp)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOprateEvidence(byte[] hash, List<byte[]> FP, List<byte[]> RP, List<byte[]> Comm, List<byte[]> SIG, List<byte[]> Encript, String creator, BigInteger timeStamp) {
        final Function function = new Function(
                FUNC_OPRATEEVIDENCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash), 
                FP.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(FP, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                RP.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(RP, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                Comm.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(Comm, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                SIG.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(SIG, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                Encript.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(Encript, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(creator), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(timeStamp)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<byte[], List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, String, BigInteger> getOprateEvidenceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_OPRATEEVIDENCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<byte[], List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, String, BigInteger>(

                (byte[]) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue()), 
                convertToNative((List<Bytes32>) results.get(2).getValue()), 
                convertToNative((List<Bytes32>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue()), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public Tuple4<byte[], List<byte[]>, String, Boolean> getRequestData(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<byte[], List<byte[]>, String, Boolean>(
                (byte[]) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue()), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue());
    }

    public Tuple8<byte[], List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, String, BigInteger> getEvidence(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETEVIDENCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<byte[], List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, String, BigInteger>(
                (byte[]) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue()), 
                convertToNative((List<Bytes32>) results.get(2).getValue()), 
                convertToNative((List<Bytes32>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue()), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue());
    }

    public String _tradeRepo() throws ContractException {
        final Function function = new Function(FUNC__TRADEREPO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt createSaveRequest(byte[] hash, List<byte[]> SIG, String creator) {
        final Function function = new Function(
                FUNC_CREATESAVEREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash), 
                SIG.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(SIG, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(creator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createSaveRequest(byte[] hash, List<byte[]> SIG, String creator, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATESAVEREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash), 
                SIG.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(SIG, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(creator)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateSaveRequest(byte[] hash, List<byte[]> SIG, String creator) {
        final Function function = new Function(
                FUNC_CREATESAVEREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash), 
                SIG.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(SIG, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(creator)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<byte[], List<byte[]>, String> getCreateSaveRequestInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATESAVEREQUEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<byte[], List<byte[]>, String>(

                (byte[]) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue()), 
                (String) results.get(2).getValue()
                );
    }

    public String _requestRepo() throws ContractException {
        final Function function = new Function(FUNC__REQUESTREPO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _evidenceRepo() throws ContractException {
        final Function function = new Function(FUNC__EVIDENCEREPO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List<CreateSaveRequestEventResponse> getCreateSaveRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATESAVEREQUEST_EVENT, transactionReceipt);
        ArrayList<CreateSaveRequestEventResponse> responses = new ArrayList<CreateSaveRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateSaveRequestEventResponse typedResponse = new CreateSaveRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.hash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.SIG = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateSaveRequestEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATESAVEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateSaveRequestEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATESAVEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OprateSaveRequestEventResponse> getOprateSaveRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPRATESAVEREQUEST_EVENT, transactionReceipt);
        ArrayList<OprateSaveRequestEventResponse> responses = new ArrayList<OprateSaveRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OprateSaveRequestEventResponse typedResponse = new OprateSaveRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.hash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOprateSaveRequestEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OPRATESAVEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOprateSaveRequestEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OPRATESAVEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<EvidenceSavedEventResponse> getEvidenceSavedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVIDENCESAVED_EVENT, transactionReceipt);
        ArrayList<EvidenceSavedEventResponse> responses = new ArrayList<EvidenceSavedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EvidenceSavedEventResponse typedResponse = new EvidenceSavedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.FP = (List<byte[]>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.RP = (List<byte[]>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.Comm = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.Encript = (List<byte[]>) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.creator = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.timeStamp = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeEvidenceSavedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EVIDENCESAVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeEvidenceSavedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EVIDENCESAVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ElecTrade load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ElecTrade(contractAddress, client, credential);
    }

    public static ElecTrade deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ElecTrade.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateSaveRequestEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] hash;

        public List<byte[]> SIG;

        public String creator;
    }

    public static class OprateSaveRequestEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] hash;
    }

    public static class EvidenceSavedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] hash;

        public List<byte[]> FP;

        public List<byte[]> RP;

        public List<byte[]> Comm;

        public List<byte[]> Encript;

        public String creator;

        public BigInteger timeStamp;
    }
}
